Option Compare Database
Option Explicit


Sub SubBackend()
'----------------------------------------------------------
'Die Funktion bindet das Backend so ein wie im Moment die Tabelle sind
'In der Variablen DatName muss der komplette Datenbank Name inkl absolutem Pfad stehen
' z.B. "C:\programme\ps\PS_DatXP.mdb"
'Die Funktion gibt die Anzahl der engebundenen Tabellen zurück bei Fehler wird 0 zurück gegeben
'abgeändert aus Donkarl.com 3.1
'----------------------------------------------------------

Dim db As DAO.Database
Dim daten As String
Dim i As Integer
Dim l_1 As Long
On Error GoTo Err_
Set db = CurrentDbC()



daten = CurrentProject.Path & "\CS_InterneDaten.accdb"

If Dir(daten) = "" Then
    MsgBox ("Es gibt kein Datenfile. Es muss eine Datei CS_InterneDaten.accdb im CSafe Verzeichnis existieren.")
    DoCmd.Quit
    Exit Sub
End If


If daten <> "" Then
    DoCmd.OpenForm "frmFortschritt"
    Form_frmFortschritt.funAnzeige db.TableDefs.count, 0
    Screen.MousePointer = 11
    For i = 0 To db.TableDefs.count - 1
        If db.TableDefs(i).Connect <> "" Then
            If Mid(db.TableDefs(i).Name, 3) <> "tDA" Then
                If Mid(db.TableDefs(i).Connect, 11) <> daten Then
                    db.TableDefs(i).Connect = ";database=" & daten
                    db.TableDefs(i).RefreshLink
                End If
            End If
       End If
       l_1 = i
       Form_frmFortschritt.funAnzeige db.TableDefs.count, l_1
       DoEvents
    Next i
    
    Set db = Nothing
    Screen.MousePointer = 0
    DoCmd.Close acForm, "frmFortschritt"
End If


Exit_:
Exit Sub
Err_:
Screen.MousePointer = 0
'    MsgErr "MG_Verbinden", "SubPsBackend", Err.Description, Err.Number, Err.Erl
'    Resume Exit_
Resume Next
End Sub

Sub SubBackendDaten(DateiName As String)
'----------------------------------------------------------
'Die Funktion bindet nur die Daten Backend Tabellen neu ein.
'Die Daten Backend Tabellen zeichnen sich durch die ersten drei Buchstaben aus tDA
'Der Dateiname muss komplett mit Pfad angegeben werden z.B. "C:\programme\ps\PS_DatXP.mdb"
'Die Funktion gibt die Anzahl der engebundenen Tabellen zurück bei Fehler wird 0 zurück gegeben
'abgeändert aus Donkarl.com 3.1
'----------------------------------------------------------

Dim db As DAO.Database
Dim daten As String
Dim i As Integer
Dim l_1 As Long
'On Error GoTo err_
Set db = CurrentDbC()


If Dir(DateiName) = "" Then
    MsgBox ("Es gibt kein Datenfile. Die Datei existiert nicht:" & vbCrLf & DateiName)
    DoCmd.Quit
    Exit Sub
End If



DoCmd.OpenForm "frmFortschritt"
Form_frmFortschritt.funAnzeige db.TableDefs.count, 0
Screen.MousePointer = 11

For i = 0 To db.TableDefs.count - 1
    If db.TableDefs(i).Connect <> "" Then
        If Mid(db.TableDefs(i).Name, 1, 3) = "tDA" Then
            'If Mid(db.TableDefs(I).Connect, 11) <> DateiName Then
                'db.TableDefs(I).RefreshLink
                db.TableDefs(i).Connect = ";database=" & DateiName
                db.TableDefs(i).RefreshLink
            'End If
        End If
   End If
   l_1 = i
   Form_frmFortschritt.funAnzeige db.TableDefs.count, l_1
   DoEvents
Next i

Set db = Nothing
Screen.MousePointer = 0
DoCmd.Close acForm, "frmFortschritt"



Exit_:
Exit Sub
Err_:
Screen.MousePointer = 0
'    MsgErr "MG_Verbinden", "SubPsBackend", Err.Description, Err.Number, Err.Erl
'    Resume Exit_
'Resume Next
End Sub




Function funNameBackend() As String
'----------------------------------------------------------
'Die Funktion gibt das Verzeichnis der ersten Tabelle wieder 080324 MG
'----------------------------------------------------------

Dim db As DAO.Database
Dim daten As String
Dim i As Integer

On Error GoTo Err_
Set db = CurrentDbC()


For i = 0 To db.TableDefs.count - 1
   If db.TableDefs(i).Connect <> "" Then
    daten = Mid(db.TableDefs(i).Connect, 11)
'        If MID(DB.TableDefs(I).Connect, 11) <> Daten Then
'            DB.TableDefs(I).Connect = ";database=" & Daten
'            DB.TableDefs(I).RefreshLink
'        End If
   End If
Next i

Set db = Nothing

funNameBackend = daten

Exit_:
Exit Function
Err_:
    MsgErr "MG_Verbinden", "funNameBackend", Err.description, Err.Number, Err.Erl
End Function


Function funDelDBName(strDel As String)
'----------------------------------------------------------
'Die Funktion löscht die übergebenen Buchstaben am Anfang des Tabellennamens
'Nützlich für die Einbindung von Tabellen die nach SQl importiert wurden
'wenn mann aus dbo_tblPack tblPack machen will gibt man ein dbo_
'wenn ein * eingegeben wird werden alle verbundenen Tabellen gelöscht
' Tabellen mit temp werden nicht gelöscht
' 1.11.2005 MG
'----------------------------------------------------------

Dim db As DAO.Database
Dim daten As String
Dim i As Integer
Dim strSp1 As String

'On Error GoTo Err_

If strDel = "" Then
    strDel = InputBox("Name der Tabellen z.B. tbl* oder * für alle")
    If strDel = "" Then Exit Function
End If

Set db = CurrentDb()

Screen.MousePointer = 11
For i = 0 To db.TableDefs.count - 1
    strSp1 = db.TableDefs(i).Name
    If strDel <> "*" Then
        If Mid(strSp1, 1, Len(strDel)) = strDel Then
            db.TableDefs(i).Name = Mid(strSp1, Len(strDel) + 1, 30)
        End If
    Else  'Löscht die ganze Tabelle
        'Systhemtabellen und Tabellen mit tmpTemp werden nicht gelöscht
        If Left(strSp1, 4) <> "MSys" And _
            Nz(InStr(1, strSp1, "temp", 1)) = 0 And _
            Nz(InStr(1, strSp1, "tmp", 1)) = 0 Then
            'DoCmd.DeleteObject acTable, strSP1
            DoCmd.RunSQL "DROP TABLE " & strSp1 & ""
        End If
    End If
    
Next i



Set db = Nothing


Screen.MousePointer = 0

Exit Function
Err_:
Screen.MousePointer = 0
MsgBox "Bei der Installation ist ein Fehler aufgetreten. " & vbCrLf & Err.description, 16, "FEHLER !"

End Function

Function funCopyBer(strCopy As String)
'----------------------------------------------------------
'Die Funktion kopiert Berichte und kann zum umschalten für einen anderen Anwender
'benutzt werden
'7.03.2006 MG
'----------------------------------------------------------

Dim db As DAO.Database
Dim daten As String
Dim i As Integer
Dim strSp1 As String
Dim rpt As Report


    ' Reports-Auflistung durchlaufen.
For Each rpt In Reports
    'Name = rpt.Name
    'Debug.Print rpt.Name
Next rpt

GoTo Hupf

DoCmd.CopyObject , "berAufABxy", acReport, "berAufABxy"

'listst alle Berichte auf
'SELECT * FROM msysobjects WHERE (((msysobjects.Type)=-32764));

'On Error GoTo Err_

If strCopy = "" Then
    strCopy = InputBox("Endung der Berichte")
    If strCopy = "" Then Exit Function
End If

Set db = CurrentDb()

Screen.MousePointer = 11


Screen.MousePointer = 0

Hupf:

Exit Function
Err_:
Screen.MousePointer = 0
MsgBox "Bei der Installation ist ein Fehler aufgetreten. " & vbCrLf & Err.description, 16, "FEHLER !"

End Function

Function funTabVergleichen(datName As String)
'funTabVergleichen("C:\PSout.txt")
'Die Funktion vergleicht Eine externe mit der Lokalen Backen Datei und speichert die Unterschiede in der Datei
'Die Textdateien wird danach automatisch geöffnet

Dim db As DAO.Database
Dim sDaten As String
Dim i As Long

If Nz(datName) = "" Then
    'MsgBox ("Geben Sie einen Dateinamen an.")
    'Exit Function
    datName = "c:\PS_Datenbankvergleich_" & Year(Now) & Month(Now) & Day(Now) '& "_" & Hour(Now) & Minute(Now)
End If

'Die externe Backend Datei auswählen
sDaten = funDateiAuswaehlen("c:\", ".accdb")



Set db = CurrentDbC()

Open datName & "out.txt" For Output As #1    ' Datei zur Ausgabe öffnen.
Write #1, "###################################################"
Write #1, "# Es werden zwei Tabbelen miteinander verglichen. #"
Write #1, "# Erst die Externe mit der Lokalen und dann,      #"
Write #1, "# die Lokale mit der Externen,                    #"
Write #1, "# Externe Tabelle : " & sDaten & "#"
Write #1, "# Lokale Tabelle  : " & CurrentProject.FullName & " #"
Write #1, "# " & sDaten & " mit der " & CurrentProject.FullName & " #"
Write #1, "###################################################"


Close #1    ' Datei schließen.

DoCmd.OpenForm "frmFortschritt"

Form_frmFortschritt.funAnzeige db.TableDefs.count - 1, 1


For i = 0 To db.TableDefs.count - 1
   If db.TableDefs(i).Connect <> "" Then
        If Mid(db.TableDefs(i).Connect, 11) <> sDaten Then
            'DB.TableDefs(I).Connect = ";database=" & Daten
            'DB.TableDefs(I).RefreshLink
            'Debug.Print DB.TableDefs(i).Name
            Form_frmFortschritt.funAnzeige db.TableDefs.count - 1, i
            DoEvents
            
             funField "", db.TableDefs(i).Name, datName & "Loc.txt"  '"c:\PSLoc.txt"
        End If
   End If
Next i


For i = 0 To db.TableDefs.count - 1
   If db.TableDefs(i).Connect <> "" Then
        If Mid(db.TableDefs(i).Connect, 11) <> sDaten Then
            'DB.TableDefs(I).Connect = ";database=" & Daten
            'DB.TableDefs(I).RefreshLink
            'Debug.Print DB.TableDefs(i).Name
            Form_frmFortschritt.funAnzeige db.TableDefs.count - 1, i
            DoEvents
             funField sDaten, db.TableDefs(i).Name, datName & "Ext.txt"   '"C:\PSout.txt"
        End If
  End If
Next i
DoCmd.Close acForm, "frmFortschritt"

'Vergleicht die beiden Dateien
funDatVer datName



Shell "notepad.exe " & datName & "out.txt", 3




End Function


Sub funField(NameDB As String, NameTabelle As String, NameDatei As String)

Dim dbs As DAO.Database
Dim rst As DAO.Recordset
Dim fldTableDef As DAO.Field
Dim fldQueryDef As DAO.Field
Dim fldRecordset As DAO.Field
Dim fldRelation As DAO.Field
Dim fldIndex As DAO.Field
Dim prpLoop As DAO.Property
Dim i As Integer

On Error GoTo Err_

If NameDB <> "" Then
    Set dbs = OpenDatabase(NameDB)
Else
    Set dbs = CurrentDb()
End If


Set rst = dbs.OpenRecordset(NameTabelle)

'Ein Field-Objekt aus verschiedenen Fields-
'Auflistungen Objektvariablen zuweisen.
'Set fldTableDef = DBs.TableDefs(0).Fields(0)
'Set fldQueryDef = DBs.QueryDefs(0).Fields(0)
'Set fldRecordset = Rst.Fields(1)
'Set fldRelation = DBs.Relations(0).Fields(0)
'Set fldIndex = DBs.TableDefs(0).Indexes(0).Fields(0)

'Bericht ausgeben.
'FieldOutput "TableDef", fldTableDef
'FieldOutput "QueryDef", fldQueryDef
'FieldOutput "Recordset", fldRecordset
'FieldOutput "Relation", fldRelation
'FieldOutput "Index", fldIndex

For i = 0 To rst.Fields.count - 1
               FieldOutput "Recordset", rst.Fields(i), NameDatei
           '  Debug.Print DB.TableDefs(i).Name
Next i

rst.Close
dbs.Close

Exit Sub
Err_:
   Resume Next

End Sub

Sub FieldOutput(strTemp As String, fldTemp As DAO.Field, NameDatei As String)

Dim prpLoop As DAO.Property
Dim sz As String
Dim SType As String
Dim LType As Long
Dim sName As String
Dim SSize As String
Dim lSize As Long
Dim sTable As String



Open NameDatei For Append As #1    ' Datei zur Ausgabe öffnen.

'Debug.Print "Gültige Field-Eigenschaft in " & strTemp

' Enumeration der Properties-Auflistung des
' übergebenen Field-Objekts.
For Each prpLoop In fldTemp.Properties
   ' Einige Eigenschaften sind in bestimmten
   ' Zusammenhängen unzulässig(z.B. die
   ' Value-Eigenschaft in einer Fields-
   ' Auflistung eines TableDef-Objekts). Versuche,
   ' eine unzulässige Eigenschaft zu verwenden,
   ' lösen Fehler aus.
   If OnErRe Then On Error Resume Next
   
 Select Case prpLoop.Name
     Case "Type"
         SType = Format(prpLoop.Value, "0000") & "  "
         LType = Val(prpLoop.Value)
     Case "Name"
         sName = prpLoop.Value '& String(25 - Len(prpLoop.Value), " ")
     Case "Size"
         SSize = Format(prpLoop.Value, "0000") & "  "
         lSize = Val(prpLoop.Value)
     Case "SourceTable"
         sTable = prpLoop.Value '& String(25 - Len(prpLoop.Value), " ")
         'STable = STable
         sz = "  " & sTable & sName & SType & SSize
         Write #1, 1, sTable, sName, LType, lSize ' Die geschriebenen Daten
         'Debug.Print sz
 End Select
     
   ' Debug.Print prpLoop.Name & "= " & prpLoop.Value
     
    ' On Error GoTo 0

Next prpLoop

Close #1    ' Datei schließen.

End Sub

Function funDatVer(datName As String)
'List zwei Textdateien ein und vergleicht diese
'fundatver "c:\PSLoc.txt","c:\PSext.txt"
'Das ergebnis wir in die Datei (Name)

Dim LType As Long
Dim sName As String
Dim lSize As Long
Dim sTable As String
Dim LType2 As Long
Dim SName2 As String
Dim Lsize2 As Long
Dim STable2 As String
Dim Lstat As Long
Dim bG As Boolean
Dim st1 As String
Dim l_ist As Long
Dim l_len As Long


On Error GoTo Err_
   
Open datName & "out.txt" For Append As #3    ' Datei zur Ausgabe öffnen.
'Write #3, STable, SName, LType, Lsize ' Die geschriebenen Daten

Open datName & "Loc.txt" For Input As #1    ' Datei zum Einlesen öffnen.

DoCmd.OpenForm "frmFortschritt"
l_len = FileLen(datName & "Loc.txt")
Form_frmFortschritt.funAnzeige l_len, l_ist



Do While Not EOF(1)    ' Schleife bis Dateiende.
    Input #1, Lstat, sTable, sName, LType, lSize    ' Daten in zwei Variablen einlesen.
    If Lstat = 1 Then 'nur prüfen wenn 1
        l_ist = l_ist + 1
        Form_frmFortschritt.funAnzeige l_len, l_ist
        DoEvents
        Open datName & "Ext.txt" For Input As #2    ' Datei zum Einlesen öffnen.
        Do While (Not EOF(2)) And (Not bG)      ' Schleife bis Dateiende.
            Input #2, Lstat, STable2, SName2, LType2, Lsize2    ' Daten in zwei Variablen einlesen.
            
            If STable2 <> sTable Then ' Namen vergleichen
                st1 = "Tabelle<> :"
            End If
            If SName2 <> sName Then
                st1 = "Name<>:"
            End If
            If LType2 <> LType Then
                st1 = "Type<>:"
            End If
            If Lsize2 <> lSize Then
                st1 = "Größe<>:"
            End If
            
            If (STable2 = sTable) And _
            (SName2 = sName) And _
            (LType2 = LType) And _
            (Lsize2 = lSize) Then bG = True
            
            
            
        Loop
        Close #2    ' Datei schließen.
    End If
    If bG = False Then
        'Debug.Print sTable, sName, LType, lSize, st1 & " Loc > Ext"
        Write #3, sTable, sName, LType, lSize, st1 & " Loc > Ext"  ' Die geschriebenen Daten
        st1 = ""
    End If
    bG = False
    
Loop
Close #1    ' Datei schließen.
DoCmd.Close acForm, "frmFortschritt"

Open datName & "Ext.txt" For Input As #1    ' Datei zum Einlesen öffnen.

Do While Not EOF(1)    ' Schleife bis Dateiende.
    Input #1, Lstat, sTable, sName, LType, lSize    ' Daten in zwei Variablen einlesen.

    Open datName & "Loc.txt" For Input As #2    ' Datei zum Einlesen öffnen.
    Do While (Not EOF(2)) And (Not bG)      ' Schleife bis Dateiende.
        Input #2, Lstat, STable2, SName2, LType2, Lsize2    ' Daten in zwei Variablen einlesen.
        If (STable2 = sTable) And _
            (SName2 = sName) And _
            (LType2 = LType) And _
            (Lsize2 = lSize) Then bG = True
    Loop
    Close #2    ' Datei schließen.
    
    If bG = False Then
        'Debug.Print sTable, sName, LType, lSize
        Write #3, sTable, sName, LType, lSize ' Die geschriebenen Daten

    End If
    bG = False
    
Loop
Close #1    ' Datei schließen.
Close #3    ' Datei schließen.

Exit Function
Err_:
Resume Next

End Function


Public Function funLinkTable(strDatabaseSource As String, _
    strTableSource As String, strTableDestination As String)
'Es wird eine externe datenbank eingebunden siehe Parameter  28.3.2013
        
' strDatabaseSource   : Pfad und Name der fremden Datenbank
' strTableSource      : Name der zu verknüpfenden Tabelle
' strTableDestination : Name der Verknüpfung in der aktuellen Datenbank

Dim dbSource As DAO.Database
Dim dbTarget As DAO.Database
Dim tdf As DAO.TableDef
Dim dbDestination
If OnErRe Then On Error Resume Next

    Set dbSource = DBEngine.Workspaces(0).OpenDatabase(strDatabaseSource)
    'Set dbDestination = CurrentDb
    Set tdf = CurrentDb.CreateTableDef(strTableDestination)
    tdf.Connect = ";DATABASE=" & strDatabaseSource
    tdf.SourceTableName = strTableSource
    CurrentDb.TableDefs.Append tdf
    funLinkTable = True
LinkTable_Exit:
    
    dbSource.Close
    Set dbSource = Nothing
    Set dbDestination = Nothing
    Set tdf = Nothing

End Function





Public Function funDelUnlinkTables(Filter_ As String)
'Diese Funktion lösch alle Tabellen die von extern verlinkt sind
'Ist wichtig für die Runtime weil da sonst proble kommen 1.4.2013

'Der Filter sagt welche Tabellen "t_" allgemeine Gruppe 1 "tD" = Daten gruppe 2

Dim db As DAO.Database
Dim daten As String
Dim i As Integer
Dim l_1 As Long
Dim OK As Boolean
If OnErRe Then On Error Resume Next

On Error Resume Next  'Muss immer an sein sonst funktioniert das löschen nicht 20180409

Set db = CurrentDb
While Not OK
   l_1 = db.TableDefs.count - 1
    For i = 0 To l_1
        'Debug.Print db.TableDefs(i).Name
        If i < db.TableDefs.count Then
            If db.TableDefs(i).Connect <> "" Then  '# Hier kommt fehler 20180409
                If Mid(db.TableDefs(i).Name, 1, Len(Filter_)) = Filter_ Then
                    db.TableDefs.Delete (db.TableDefs(i).Name)
                    db.TableDefs(i).RefreshLink
                End If
            End If
        End If
    Next i
    
    OK = True
    'Nochmal durchsuchen ob alle gelöscht
    l_1 = db.TableDefs.count - 1
    For i = 0 To l_1
        If db.TableDefs(i).Connect <> "" Then
            If Mid(db.TableDefs(i).Name, 1, 2) = Filter_ Then
                OK = False
            End If
        End If
    Next i
Wend
    
    
Set db = Nothing

End Function

Public Function funConnectDB_T(Gruppe As Long, Datei_ As String)
'Erzeugt Verlinkungen zu den Tabellen die in der Tabelle t_Tabellen stehen
'Löscht vorher die alte Verlinkung 17.4.2016
'Gruppe 1 = die internen Vorlagedaten
'Gruppe 2 = die eigentliche Datentabelle
'Datei ist der komplette Dateiname als String

Dim Rs1 As DAO.Recordset
Dim sSql As String

sSql = "SELECT * FROM t_Tabellen WHERE TBGruppe =" & Gruppe & ";"

Set Rs1 = CurrentDb.OpenRecordset(sSql)


Rs1.MoveFirst
While Not Rs1.EOF
    'Löscht zueerst die eingebundene Tabelle
    funDelUnlinkTables Rs1!tbName
    'Velinkt neu
    funLinkTable Datei_, Rs1!tbName, Rs1!tbName
    Rs1.MoveNext
Wend

Rs1.Close
Set Rs1 = Nothing


End Function

Function funNameBackendTabelle() As String
'MG 13.2.2014
'die Funktionliest den Dateinamen der verwendeten Backend Datentabelle aus und gibt diesen zurück



Dim db As DAO.Database
Dim daten As String
Dim i As Integer
Dim l_1 As Long
Dim S1 As String
Dim S2 As String
Dim OK As Boolean
If OnErRe Then On Error Resume Next



Set db = CurrentDb

   l_1 = db.TableDefs.count - 1
    For i = 0 To l_1
        If db.TableDefs(i).Connect <> "" Then
            If Mid(db.TableDefs(i).Name, 1, 2) = "tD" Then
                S1 = db.TableDefs(i).Connect
            End If
        End If
    Next i
    
    
    For i = Len(S1) To 1 Step -1
        If Mid(S1, i, 1) = "\" Then
            S2 = Mid(S1, i + 4, (Len(S1) - (i + 9))) 'nur den sinnvollen Teil ausschneiden
            Exit For
        End If
    Next i

funNameBackendTabelle = S2


End Function

Sub subReferenzenAusgeben()
    Dim i As Integer

    For i = 1 To References.count
         Debug.Print References(i).Name, References(i).FullPath
    Next i
End Sub